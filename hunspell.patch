diff --git a/Telegram/SourceFiles/chat_helpers/message_field.cpp b/Telegram/SourceFiles/chat_helpers/message_field.cpp
index 0eb182789..cdf80149a 100644
--- a/Telegram/SourceFiles/chat_helpers/message_field.cpp
+++ b/Telegram/SourceFiles/chat_helpers/message_field.cpp
@@ -18,6 +18,7 @@ https://github.com/telegramdesktop/tdesktop/blob/master/LEGAL
 #include "auth_session.h"
 #include "styles/style_boxes.h"
 #include "styles/style_history.h"
+#include "hunspell.cpp"
 
 namespace {
 
@@ -320,6 +321,7 @@ void InitMessageField(
 	field->setMarkdownReplacesEnabled(rpl::single(true));
 	field->setEditLinkCallback(
 		DefaultEditLinkCallback(controller, field));
+		installHunspellSyntaxHighlighter(field->rawTextEdit().get());
 }
 
 bool HasSendText(not_null<const Ui::InputField*> field) {
diff --git a/Telegram/SourceFiles/hunspell.cpp b/Telegram/SourceFiles/hunspell.cpp
new file mode 100644
index 000000000..7bd7bc35d
--- /dev/null
+++ b/Telegram/SourceFiles/hunspell.cpp
@@ -0,0 +1,148 @@
+#include <QSyntaxHighlighter>
+#include <QTextCodec>
+#include <QLibrary>
+#include <QLocale>
+#include <QDir>
+
+#include <memory>
+#include <vector>
+
+namespace HunspellQtHighlighter {
+
+using namespace std;
+
+using Hunhandle = void;
+using Hunspell_create_type = Hunhandle *(*)(const char *affpath, const char *dpath);
+using Hunspell_get_dic_encoding_type = char *(*)(Hunhandle *pHunspell);
+using Hunspell_spell_type = int(*)(Hunhandle* pHunspell, const char*);
+using Hunspell_destroy_type = void(*)(Hunhandle *pHunspell);
+
+static Hunspell_create_type Hunspell_create;
+static Hunspell_get_dic_encoding_type Hunspell_get_dic_encoding;
+static Hunspell_spell_type Hunspell_spell;
+static Hunspell_destroy_type Hunspell_destroy;
+
+class Helper
+{
+public:
+    Helper(const QString &lang)
+        : m_hunspell(nullptr, Hunspell_destroy)
+    {
+        const QString hunspellPath = "/usr/share/hunspell";
+        const auto getFilePath = [&](const QString &suffix) {
+            return QDir(hunspellPath).entryInfoList({lang + "*." + suffix}).value(0).filePath().toLocal8Bit();
+        };
+        const QByteArray affPath = getFilePath("aff");
+        const QByteArray dicPath = getFilePath("dic");
+        if (!affPath.isEmpty() && !dicPath.isEmpty())
+        {
+            m_hunspell.reset(Hunspell_create(affPath, dicPath));
+            m_codec = QTextCodec::codecForName(Hunspell_get_dic_encoding(m_hunspell.get()));
+            if (!m_codec)
+                m_hunspell.reset();
+        }
+    }
+
+    bool isOpen() const
+    {
+        return (m_hunspell != nullptr);
+    }
+
+    bool spell(const QStringRef &word)
+    {
+        return (Hunspell_spell(m_hunspell.get(), m_codec->fromUnicode(word.data(), word.count())) != 0);
+    }
+
+private:
+    unique_ptr<Hunhandle, Hunspell_destroy_type> m_hunspell;
+    QTextCodec *m_codec = nullptr;
+};
+
+class Highlighter final : public QSyntaxHighlighter
+{
+public:
+    Highlighter(QTextEdit *textEdit)
+        : QSyntaxHighlighter(textEdit->document())
+    {}
+
+    void setSpellCheckers(QStringList languages)
+    {
+        m_hunspells.clear();
+        languages.removeDuplicates();
+        for (const QString &lang : languages)
+        {
+            auto hunspell = make_unique<Helper>(lang.toLatin1());
+            if (hunspell->isOpen())
+                m_hunspells.push_back(move(hunspell));
+        }
+    }
+
+private:
+    void highlightBlock(const QString &text)
+    {
+        if (m_hunspells.empty())
+            return;
+
+        QTextCharFormat underlineFmt;
+        underlineFmt.setFontUnderline(true);
+        underlineFmt.setUnderlineColor(Qt::red);
+
+        const int textLen = text.length();
+        int beginIdx = 0;
+        for (int endIdx = 0; endIdx < textLen; ++endIdx)
+        {
+            const bool letterAtBeginIdx = text[beginIdx].isLetter();
+            const bool letterAtEndIdx = text[endIdx].isLetter();
+            const bool atEnd = letterAtEndIdx && (endIdx == textLen - 1);
+            if (letterAtBeginIdx && (!letterAtEndIdx || atEnd))
+            {
+                const int wordLen = endIdx + atEnd - beginIdx;
+                const QStringRef word = text.midRef(beginIdx, wordLen);
+                if (word.length() > 1)
+                {
+                    bool correctWord = false;
+                    for (auto &&hunspell : m_hunspells)
+                    {
+                        if (hunspell->spell(word))
+                        {
+                            correctWord = true;
+                            break;
+                        }
+                    }
+                    setFormat(beginIdx, wordLen, correctWord ? QTextCharFormat() : underlineFmt);
+                }
+            }
+            if (!letterAtBeginIdx || !letterAtEndIdx)
+                beginIdx = endIdx + 1;
+        }
+    }
+
+private:
+    vector<unique_ptr<Helper>> m_hunspells;
+};
+
+}
+
+static bool installHunspellSyntaxHighlighter(QTextEdit *textEdit)
+{
+    using namespace HunspellQtHighlighter;
+    static bool hasHunspellFunctions = false;
+    if (!hasHunspellFunctions)
+    {
+        QLibrary hunspellLib("hunspell");
+        if (hunspellLib.load())
+        {
+            Hunspell_create = (Hunspell_create_type)hunspellLib.resolve("Hunspell_create");
+            Hunspell_get_dic_encoding = (Hunspell_get_dic_encoding_type)hunspellLib.resolve("Hunspell_get_dic_encoding");
+            Hunspell_spell = (Hunspell_spell_type)hunspellLib.resolve("Hunspell_spell");
+            Hunspell_destroy = (Hunspell_destroy_type)hunspellLib.resolve("Hunspell_destroy");
+            hasHunspellFunctions = (Hunspell_create && Hunspell_get_dic_encoding && Hunspell_spell && Hunspell_destroy);
+        }
+    }
+    if (hasHunspellFunctions)
+    {
+        (new Highlighter(textEdit))->setSpellCheckers({QLocale::system().name(), "en_US"});
+        return true;
+    }
+    return false;
+}
